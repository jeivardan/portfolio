{"version":3,"sources":["components/Home.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["Home","Fragment","className","Component","Navigation","props","state","isOpen","setIsOpen","toggle","bind","this","setState","Navbar","color","expand","fixed","NavbarBrand","href","class","NavbarToggler","onClick","Collapse","navbar","Nav","NavItem","NavLink","App","Row","id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8QAEqBA,E,uKAEb,OACI,kBAAC,IAAMC,SAAP,KACI,uBAAGC,UAAU,4BACT,wCACa,0BAAMA,UAAU,gBAAhB,gBAEb,8CACe,0BAAMA,UAAU,gBAAhB,OADf,sBAGA,4BACI,0BAAMA,UAAU,gBAAhB,qC,GAZUC,a,+DCCbC,E,kDACjB,WAAYC,GAAQ,IAAD,8BAEf,cAAMA,IAEDC,MAAQ,CACXC,QAAQ,EACRC,WAAW,GAGb,EAAKC,OAAS,EAAKA,OAAOC,KAAZ,gBATC,E,qDAafC,KAAKC,SAAS,CACVL,QAASI,KAAKL,MAAMC,W,+BAKxB,OACI,kBAAC,IAAMN,SAAP,KACI,kBAACY,EAAA,EAAD,CAAQC,MAAM,OAAOC,OAAO,KAAKC,MAAM,OACvC,kBAACC,EAAA,EAAD,CAAaC,KAAK,QAAQhB,UAAU,OAAM,uBAAGiB,MAAM,iCAAT,SAC1C,kBAACC,EAAA,EAAD,CAAeC,QAASV,KAAKF,OAAQP,UAAU,sBAA/C,KACA,kBAACoB,EAAA,EAAD,CAAUf,OAAQI,KAAKL,MAAMC,OAAQgB,QAAM,EAACrB,UAAU,0BAClD,kBAACsB,EAAA,EAAD,CAAKtB,UAAU,gCAAgCqB,QAAM,GACrD,kBAACE,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASR,KAAK,SAASG,QAASV,KAAKF,QAAQ,uBAAGU,MAAM,iCAAT,cAEjD,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASR,KAAK,YAAYG,QAASV,KAAKF,QAAQ,uBAAGU,MAAM,iCAAT,cAEpD,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAASR,KAAK,WAAWG,QAASV,KAAKF,QAAQ,uBAAGU,MAAM,iCAAT,qB,GAlC/BhB,aCezBwB,MAbf,WACE,OACM,yBAAKR,MAAM,mBACT,kBAACS,EAAA,EAAD,KACE,kBAAC,EAAD,OAEF,yBAAK1B,UAAU,+CAA+C2B,GAAG,QAC/D,kBAAC,EAAD,SCAQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.81ea47ca.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Home extends Component{\n    render(){\n        return (\n            <React.Fragment>\n                <p className=\"text-justify text-center\">\n                    <h1>\n                        Hi, I am <span className=\"text-primary\">Jeivardan V</span>\n                    </h1>\n                    <h2>\n                    Tech Enthusiast<span className=\"text-primary\"> | </span>Software Developer\n                    </h2>\n                    <h3>\n                        <span className=\"text-primary\">Currently interning at KLA</span>\n                    </h3>\n                </p>\n        </React.Fragment>\n        );\n    }\n}","import React, {Component}  from 'react';\nimport {Navbar, NavItem, NavLink, NavbarToggler, Collapse, Nav, NavbarBrand} from 'reactstrap'; \n\nexport default class Navigation extends Component{\n    constructor(props) {\n        \n        super(props);\n        \n        this.state = {\n          isOpen: false,\n          setIsOpen: false,\n        }\n        \n        this.toggle = this.toggle.bind(this);\n    }\n\n    toggle() {\n        this.setState({\n            isOpen: !this.state.isOpen\n        });\n    }\n\n    render(){\n        return (\n            <React.Fragment>\n                <Navbar color=\"dark\" expand=\"sm\" fixed=\"top\">\n                <NavbarBrand href=\"#home\" className=\"p-0\"><p class=\"font-weight-bold text-primary\">Home</p></NavbarBrand>\n                <NavbarToggler onClick={this.toggle} className='ml-auto bg-primary'>=</NavbarToggler>\n                <Collapse isOpen={this.state.isOpen} navbar className='justify-content-center'>\n                    <Nav className=\"p-1 w-100 justify-content-end\" navbar>\n                    <NavItem>\n                        <NavLink href=\"#about\" onClick={this.toggle}><p class=\"font-weight-bold text-primary\">About me</p></NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href=\"#projects\" onClick={this.toggle}><p class=\"font-weight-bold text-primary\">Projects</p></NavLink>\n                    </NavItem>\n                    <NavItem>\n                        <NavLink href=\"#contact\" onClick={this.toggle}><p class=\"font-weight-bold text-primary\">Contact</p></NavLink>\n                    </NavItem>\n                    </Nav>\n                </Collapse>\n                </Navbar>\n            </React.Fragment>\n        );\n    }\n}\n\n  \n","import React  from 'react';\nimport {Row} from 'reactstrap'; \nimport Home from './components/Home';\nimport Nav from './components/Navigation';\n\nfunction App() {\n  return (\n        <div class=\"container-fluid\">\n          <Row>\n            <Nav />\n          </Row>\n          <div className=\"d-flex justify-content-center pt-5 pb-5 mt-5\" id=\"home\">\n            <Home></Home>\n          </div>\n        </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles/variables.scss\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}